var decompresszip = require('decompress-zip');
var ffprobe = require('node-ffprobe');
var fs = require('fs');
var imageinfo = require('imageinfo');
var path = require('path');
var request = require('request');
var url = require('url');
var ytdl = require('ytdl');

var pdfinfo = require('node-pdfinfo').pdfinfo;     // custom node module


module.exports.loadImage = function(img_data, external_url, id, title, callback) {
	var info = imageinfo(img_data);
	var source = "data:" + info.mimeType + ";base64, " + img_data.toString("base64");
	var aspect = info.width / info.height;
	var now = new Date();

	callback(new item("img", title, id, source, external_url, 0, 0, info.width, info.height, aspect, now, null, null));
};

module.exports.loadVideo = function(vid_path, vid_url, external_url, id, title, callback) {
	ffprobe(vid_path, function(err, data){
		if(err) throw err;

		for(var i=0; i<data.streams.length; i++){
			if(data.streams[i].codec_type == "video"){
				var aspect = data.streams[i].width / data.streams[i].height;
				var now = new Date();

				callback(new item("video", title, id, vid_url, external_url, 0, 0, data.streams[i].width, data.streams[i].height, aspect, now, null, null));
			}
		}
	});
};

module.exports.loadYoutube = function(yt_url, id, callback) {
	ytdl.getInfo(yt_url, function(err, info){
		if(err) throw err;

		var mp4 = {index: -1, resolution: 0};
		for(var i=0; i<info.formats.length; i++){
			if(info.formats[i].container == "mp4" && info.formats[i].resolution !== null && info.formats[i].profile != "3d"){
				var res = parseInt(info.formats[i].resolution.substring(0, info.formats[i].resolution.length-1));
				if(res > mp4.resolution){
					mp4.index = i;
					mp4.resolution = res;
				}
			}
		}

		var title = info.title;
		var aspect = 16/9;
		var resolutionY = mp4.resolution;
		var resolutionX = resolutionY * aspect;
		var poster = info.iurlmaxres;
		if (poster === null) poster = info.iurl;
		if (poster === null) poster = info.iurlsd;
		var now = new Date();

		callback(new item("youtube", title, id, info.formats[mp4.index].url, yt_url, 0, 0, resolutionX, resolutionY, aspect, now, poster, null));
	});
};

module.exports.loadPdf = function(pdf_path, pdf_url, external_url, id, title, callback) {
	pdfinfo(pdf_path, function(err, doc) {
		if(err) throw err;

		var aspect = doc.page_width/doc.page_height;
		var now = new Date();

		callback(new item("pdf", title, id, pdf_url, external_url, 0, 0, doc.page_width, doc.page_height, aspect, now, null, null));
	});
};

module.exports.loadApp = function(zip_path, zip_url, external_url, id, callback) {
	var zipName = path.basename(zip_path);
	var zipFolder = zip_path;

	var instuctionsFile = path.join(zipFolder, "instructions.json");
	fs.readFile(instuctionsFile, 'utf8', function(err, json_str) {
		if(err) throw err;

		var instructions = JSON.parse(json_str);
		var objName = instructions.main_script.substring(0, instructions.main_script.lastIndexOf('.'));
		var aspect = instructions.width / instructions.height;
		var now = new Date();
		
		callback(new item(instructions.type, zipName, id, path.join(zip_url, instructions.main_script), external_url, 0, 0, instructions.width, instructions.height, aspect, now, zip_url+path.sep, objName), instructions);
	});
};

module.exports.loadRemoteApp = function(zip_url, id, callback) {
	var zipName = path.basename(decodeURIComponent(url.parse(zip_url).pathname));
	var zipFolder = zip_url;
	
	var instuctionsFile = zipFolder + "/instructions.json";
	request({url: instuctionsFile, encoding: null, strictSSL: false}, function(err, response, body) {
		if(err) throw err;
		
		var instructions = JSON.parse(body);
		var objName = instructions.main_script.substring(0, instructions.main_script.lastIndexOf('.'));
		var aspect = instructions.width / instructions.height;
		var now = new Date();
		
		callback(new item(instructions.type, zipName, id, zip_url+"/"+instructions.main_script, zip_url, 0, 0, instructions.width, instructions.height, aspect, now, zip_url+"/", objName), instructions);
	});
};

module.exports.loadZipApp = function(zip_path, zip_url, external_url, id, callback) {
	var zipName = path.basename(zip_path, path.extname(zip_path));
	var zipFolder = path.join(path.dirname(zip_path), zipName);

	var unzipper = new decompresszip(zip_path);
	unzipper.on('extract', function(log) {
		// read instructions for how to handle
		var instuctionsFile = path.join(zipFolder, "instructions.json");
		fs.readFile(instuctionsFile, 'utf8', function(err, json_str) {
			if(err) throw err;

			var instructions = JSON.parse(json_str);
			var objName = instructions.main_script.substring(0, instructions.main_script.lastIndexOf('.'));
			var aspect = instructions.width / instructions.height;
			var now = new Date();
			
			callback(new item(instructions.type, zipName, id, path.join(zip_url, instructions.main_script), external_url, 0, 0, instructions.width, instructions.height, aspect, now, zip_url+path.sep, objName), instructions);
		});

		// delete original zip file
		fs.unlink(zip_path, function(err) {
			if(err) throw err;
		});
	});
	unzipper.extract({
		path: path.dirname(zip_path),
		filter: function(file) {
			if(file.type === "SymbolicLink") return false;
			if(file.filename === "__MACOSX") return false;
			if(file.filename.substring(0,1) == ".") return false;
			if(file.parent.length >= 8 && file.parent.substring(0,8) == "__MACOSX") return false;

			return true;
		}
	});
};

module.exports.loadScreenCapture = function(img_data, id, title, width, height, callback) {
	var aspect = width/height;
	var now = new Date();
	callback(new item("screen", title, id, img_data, null, 0, 0, width, height, aspect, now, null, null));
};

module.exports.loadRemoteScreen = function(img_data, id, title, callback) {
	var buf = new Buffer(img_data, 'binary');

	var info = imageinfo(buf);
	var aspect = info.width / info.height;
	var now = new Date();
	callback(new item("remote_screen", title, id, img_data, null, 0, 0, info.width, info.height, aspect, now, null, null));
};

module.exports.loadWebpage = function(img_data, id, title, width, height, callback) {
	var aspect = width/height;
	var now = new Date();
	callback(new item("webpage", title, id, img_data, null, 0, 0, width, height, aspect, now, null, null));
};
//////////////////////////////////////////////////////////////////////////////////////////

function item(type, title, id, src, url, left, top, width, height, aspect, date, resrc, extra) {
	this.type = type;
	this.title = title;
	this.id = id;
	this.src = src;
	this.url = url;
	this.left = left;
	this.top = top;
	this.width = width;
	this.height = height;
	this.aspect = aspect;
	this.date = date;
	this.resrc = resrc;
	this.extra = extra;
}
