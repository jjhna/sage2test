// SAGE2 is available for use under the following license, commonly known
//          as the 3-clause (or "modified") BSD license:
//
// Copyright (c) 2014, Electronic Visualization Laboratory,
//                     University of Illinois at Chicago
// All rights reserved.
//
// http://opensource.org/licenses/BSD-3-Clause
// See included LICENSE.txt file

var net = require('net');
var util = require('util');
var dgram = require('dgram');
var WebSocket = require('ws');

var websocketIO = require('node-websocket.io');   // creates WebSocket server and clients
var server = require('../server.js'); // custom node module
var interaction = require('node-interaction'); // custom node module
var sagepointer = require('node-sagepointer'); // custom node module

var dataPort = 9123;

var eventDebug = true;
var gestureDebug = true;

function omicronManager( sysConfig )
{
	omicronManager = this;
	config = sysConfig.experimental.omicron;
	if( config.dataPort == undefined )	
	{
		console.log('Omicron: dataPort undefined. Using default: ', dataPort);
	}
	else
	{
		dataPort =  config.dataPort;
		console.log('Omicron: Listening for input server on port: ', dataPort);
	}
	
	if( sysConfig.resolution )
	{
		var columns = 1;
		var rows = 1;
		
		if( sysConfig.layout )
		{
			columns = sysConfig.layout.columns;
			rows = sysConfig.layout.rows;
		}
		
		totalWidth = sysConfig.resolution.width * columns;
		totalHeight = sysConfig.resolution.height * rows;
		
		console.log("Omicron: Touch Display Resolution: " + totalWidth + " " + totalHeight);
	}
	else
	{
		totalWidth = 8160;
		totalHeight = 2304;
	}
	
	// For accepting input server connection
	var server = net.createServer(function (socket) {
		console.log('Omicron: Input server "' + socket.remoteAddress + '" connected on port ' + socket.remotePort);
		
		socket.on('error', function(e) {
			console.log('Omicron: Input server disconnected');
			socket.destroy(); // Clean up disconnected socket
		});

	});
	server.listen(dataPort, sysConfig.host);		
}

omicronManager.prototype.setCallbacks = function( 
	sagePointerList,
	createSagePointerCB,
	showPointerCB,
	pointerPressCB,
	pointerPositionCB,
	hidePointerCB,
	pointerReleaseCB,
	pointerScrollStartCB,
	pointerScrollCB,
	pointerDblClickCB,
	pointerCloseGestureCB
)
{
	sagePointers = sagePointerList;
	createSagePointer = createSagePointerCB;
	showPointer = showPointerCB;
	pointerPress = pointerPressCB;
	pointerPosition = pointerPositionCB;
	hidePointer = hidePointerCB;
	pointerRelease = pointerReleaseCB;
	pointerScrollStart = pointerScrollStartCB;
	pointerScroll = pointerScrollCB;
	pointerDblClick = pointerDblClickCB;
	pointerCloseGesture = pointerCloseGestureCB;
}

omicronManager.prototype.runTracker = function()
{
	udp = undefined;

	udp = dgram.createSocket("udp4");
	var dstart = Date.now();
	var emit = 0;

	// array to hold all the button values (1 - down, 0 = up)
	var buttons = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	var mouse   = [0, 0, 0];
	var mousexy = [0.0, 0.0];
	var colorpt = [0.0, 0.0, 0.0];
	var mousez  = 0;
	
	udp.on("message", function (msg, rinfo)
	{
		//console.log("UDP> got: " + msg + " from " + rinfo.address + ":" + rinfo.port);
		//var out = util.format("UDP> msg from [%s:%d] %d bytes", rinfo.address,rinfo.port,msg.length);
		//console.log(out);
	 
		if ((Date.now() - dstart) > 100)
		{
			var offset = 0;
			var e = {};
			if (offset < msg.length) e.timestamp = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.sourceId = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.serviceId = msg.readInt32LE(offset); offset += 4;
			if (offset < msg.length) e.serviceType = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.type = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.flags = msg.readUInt32LE(offset); offset += 4;

			if (offset < msg.length) e.posx = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.posy = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.posz = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.orw = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.orx = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.ory = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.orz = msg.readFloatLE(offset); offset += 4;
			if (offset < msg.length) e.extraDataType = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.extraDataItems = msg.readUInt32LE(offset); offset += 4;
			if (offset < msg.length) e.extraDataMask = msg.readUInt32LE(offset); offset += 4;

			// Extra data types:
			//    0 ExtraDataNull,
			//    1 ExtraDataFloatArray,
			//    2 ExtraDataIntArray,
			//    3 ExtraDataVector3Array,
			//    4 ExtraDataString,
			//    5 ExtraDataKinectSpeech

			var r_roll  = Math.asin(2.0*e.orx*e.ory + 2.0*e.orz*e.orw);
			var r_yaw   = Math.atan2(2.0*e.ory*e.orw-2.0*e.orx*e.orz , 1.0 - 2.0*e.ory*e.ory - 2.0*e.orz*e.orz);
			var r_pitch = Math.atan2(2.0*e.orx*e.orw-2.0*e.ory*e.orz , 1.0 - 2.0*e.orx*e.orx - 2.0*e.orz*e.orz);
					
			var posX = e.posx * totalWidth;
			var posY = e.posy* totalHeight;
			var sourceID = e.sourceId;

			// serviceID:
			// (Note: this depends on the order the services are specified on the server)
			//		0 = Touch
			//		1 = Classic SAGEPointer
			var serviceID = e.serviceId;
					
			var touchWidth = 0;
			var touchHeight = 0;
			if( serviceID === 0 &&  e.extraDataItems >= 2)
			{
				touchWidth = msg.readFloatLE(offset); offset += 4;
				touchHeight = msg.readFloatLE(offset); offset += 4;
				//console.log("Touch size: " + touchWidth + "," + touchHeight); 
			}
					
			// Appending sourceID to pointer address ID
			var address = rinfo.address+":"+sourceID;
			
			// ServiceTypePointer //////////////////////////////////////////////////
			if (e.serviceType === 0)
			{  
				if( eventDebug )
				{
					console.log("pointer ID "+ sourceID +" event! type: " + e.type  );
					console.log("pointer event! type: " + e.type  );
					console.log("ServiceTypePointer> source ", e.sourceId);
					console.log("ServiceTypePointer> serviceID ", e.serviceId);
				}
				
				// TouchGestureManager Flags:
				// 1 << 17 = User flag start (as of 12/20/13)
				// User << 1 = Unprocessed
				// User << 2 = Single touch
				// User << 3 = Big touch
				// User << 4 = 5-finger hold
				// User << 5 = 5-finger swipe
				// User << 6 = 3-finger hold
				var User = 1 << 17;
				
				var FLAG_SINGLE_TOUCH = User << 2;
				var FLAG_BIG_TOUCH = User << 3;
				var FLAG_FIVE_FINGER_HOLD = User << 4;
				var FLAG_FIVE_FINGER_SWIPE = User << 5;
				var FLAG_THREE_FINGER_HOLD = User << 6;
				var FLAG_SINGLE_CLICK = User << 7;
				var FLAG_DOUBLE_CLICK = User << 8;
				
				//console.log( e.flags );
				if (e.type == 3)
				{ // update (Used only by classic SAGE pointer)
					/* if( e.sourceId in ptrs )
						return;
					colorpt = [Math.floor(e.posx*255.0), Math.floor(e.posy*255.0), Math.floor(e.posz*255.0)];
					if (offset < msg.length)
					{
						if (e.extraDataType == 4 && e.extraDataItems > 0)
						{
							console.log("create touch pointer"); 
							e.extraString = msg.toString("utf-8", offset, offset+e.extraDataItems);
							ptrinfo = e.extraString.split(" ");
							offset += e.extraDataItems;
							ptrs[e.sourceId] = {id:e.sourceId, label:ptrinfo[0], ip:ptrinfo[1], mouse:[0,0,0], color:colorpt, zoom:0, position:[0,0], mode:0};
							sio.sockets.emit('createPointer', {type: 'ptr', id: e.sourceId, label: ptrinfo[0], color: colorpt, zoom:0, position:[0,0], src: "resources/mouse-pointer-hi.png" });
						}
					}*/
				}
				else if (e.type == 4)
				{ // move
					if( e.flags == FLAG_SINGLE_TOUCH )
					{
						pointerPosition( address, { pointerX: posX, pointerY: posY } );
	
					}
				}
				else if (e.type == 15)
				{ // zoom
					if( gestureDebug )
					{
						console.log("Touch zoom");
					}
					
					/*
					Omicron zoom event extra data:
					0 = touchWidth (parsed above)
					1 = touchHeight (parsed above)
					2  = zoom delta
					3 = event second type ( 1 = Down, 2 = Move, 3 = Up )
					*/
					// extraDataType 1 = float
					if (e.extraDataType == 1 && e.extraDataItems >= 4)
					{

						var zoomDelta = msg.readFloatLE(offset); offset += 4;
						var eventType = msg.readFloatLE(offset);  offset += 4;
						console.log( zoomDelta ); 
						
						if( eventType == 1 ) // Zoom start/down
						{
							pointerScrollStart( address, posX, posY );
						}
						else // Zoom move
						{
							pointerScroll( address, { scale: 1+zoomDelta } );
						}
					}

				}
				else if (e.type == 5) { // button down
					if( gestureDebug )
					{
						console.log("\t down , flags ", e.flags);
					}
					
					if( e.flags == FLAG_SINGLE_TOUCH )
					{
						// Create pointer
						if(address in sagePointers){
							showPointer( address, { label:  "Touch: " + sourceID, color: "rgba(255, 255, 255, 1.0)" } );
						}else{
							createSagePointer(address);
							
							showPointer( address, { label:  "Touch: " + sourceID, color: "rgba(255, 255, 255, 1.0)" } );
							
							pointerPress( address, posX, posY );
						}
					}
					else if( e.flags == FLAG_FIVE_FINGER_HOLD )
					{
						if( gestureDebug )
						{
							console.log("Touch gesture: Five finger hold");
						}
						pointerCloseGesture( address, posX, posY );
					}
					else if( e.flags == FLAG_THREE_FINGER_HOLD )
					{
						if( gestureDebug )
						{
							console.log("Touch gesture: Three finger hold");
						}
						
					}
					else if( e.flags == FLAG_SINGLE_CLICK )
					{
						if( gestureDebug )
						{
							console.log("Touch gesture: Click");
						}
						
					}
					else if( e.flags == FLAG_DOUBLE_CLICK )
					{
						if( gestureDebug )
						{
							console.log("Touch gesture: Double Click");
							pointerDblClick( address, {} );
						}
						
					}
				}
				else if (e.type == 6)
				{ // button up
					if( e.flags == FLAG_SINGLE_TOUCH )
					{
						// Hide pointer
						hidePointer(address);
						
						// Release event
						pointerRelease(address, posX, posY);
						
						if( gestureDebug )
						{
							console.log("Touch release");
						}
					}
				}
				else
				{
				console.log("\t UNKNOWN event type ", e.type);                                        
				}

				if (emit>2) { dstart = Date.now(); emit = 0; }
			}// ServiceTypePointer ends ///////////////////////////////////////////
		}
	});

	udp.on("listening", function () {
		var address = udp.address();
		//console.log("UDP> listening " + address.address + ":" + address.port);
	});
							
	udp.bind(dataPort);
};

module.exports = omicronManager;
